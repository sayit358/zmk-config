/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        bhm_l: balanced_homerow_mods_l {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <150>;
            #binding-cells = <2>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;             // delay positional check until key-release
            hold-trigger-key-positions = <13 14 15 16>;
        };

        cw: cw {
            compatible = "zmk,behavior-caps-word";
            label = "CW";
            #binding-cells = <0>;
            continue-list = <UNDERSCORE>;
        };

        bht: bht {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <150>;
            #binding-cells = <2>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            hold-trigger-key-positions = <14 15 16 2 3 4 5 17 29 28 27 26>;
            label = "BHT";
        };

        left_brace: left_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_BRACE";
            bindings = <&kp LEFT_BRACE>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        right_brace: right_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_BRACE";
            bindings = <&kp RIGHT_BRACE>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bksp_del: bksp_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BKSP_DEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        bhm_r: balanced_homerow_mods_r {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <150>;
            #binding-cells = <2>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            hold-trigger-key-positions = <19 20 21 22>;
        };
    };

    combos {
        compatible = "zmk,combos";

        cw {
            bindings = <&cw>;
            key-positions = <24 35>;
            layers = <0>;
        };

        left_brace {
            bindings = <&left_brace>;
            key-positions = <15 16>;
            layers = <0>;
        };

        right_brace {
            bindings = <&right_brace>;
            key-positions = <20 19>;
            layers = <0>;
        };

        left_paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 14>;
            layers = <0>;
        };

        right_paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <20 21>;
            layers = <0>;
        };

        print {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <17 18>;
            layers = <0>;
        };

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <30 33>;
            layers = <1>;
        };

        play_pause {
            bindings = <&kp K_PLAY_PAUSE>;
            key-positions = <32 31>;
            layers = <1>;
        };

        mute {
            bindings = <&kp K_MUTE>;
            key-positions = <13 22>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB     &kp Q               &kp W                &kp F           &kp P              &kp B        &kp J      &kp L               &kp U           &kp Y            &kp SEMI             &kp MINUS
&kp ESCAPE  &bhm_l LEFT_META A  &bhm_l LEFT_SHIFT R  &bhm_l LCTRL S  &bhm_l LEFT_ALT T  &kp G        &kp M      &bhm_r RIGHT_ALT N  &bhm_r RCTRL E  &bhm_r RSHIFT I  &bhm_r RIGHT_META O  &kp APOS
&kp LSHFT   &kp Z               &kp X                &kp C           &kp D              &kp V        &kp K      &kp H               &kp COMMA       &kp DOT          &kp FSLH             &kp RSHFT
                                                     &mo 1           &kp LALT           &kp SPACE    &kp ENTER  &kp BACKSPACE       &mo 1
            >;
        };

        raise_layer {
            bindings = <
&none   &none              &bht F4 NUMBER_4  &bht F5 NUMBER_5  &bht F6 NUMBER_6  &bht F10 BACKSLASH    &mt INSERT HOME  &kp PAGE_DOWN   &kp PAGE_UP  &mt DELETE END  &tog 3           &none
&none   &kp C_VOLUME_DOWN  &bht F1 NUMBER_1  &bht F2 NUMBER_2  &bht F3 NUMBER_3  &bht F11 EQUAL        &kp LEFT         &kp DOWN        &kp UP       &kp RIGHT       &kp C_VOLUME_UP  &none
&trans  &none              &bht F7 NUMBER_7  &bht F8 NUMBER_8  &bht F9 NUMBER_9  &bht F12 GRAVE        &bt BT_PRV       &kp C_PREVIOUS  &kp C_NEXT   &bt BT_NXT      &tog 2           &trans
                                             &none             &kp N0            &trans                &trans           &out OUT_TOG    &none
            >;
        };

        default_layers {
            bindings = <
&kp TAB     &kp Q  &kp W  &kp F  &kp P     &kp B        &kp J      &kp L          &kp U      &kp Y    &kp SEMI  &kp MINUS
&kp ESCAPE  &kp A  &kp R  &kp S  &kp T     &kp G        &kp M      &kp N          &kp E      &kp I    &kp O     &kp APOS
&kp LSHFT   &kp Z  &kp X  &kp C  &kp D     &kp V        &kp K      &kp H          &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                          &mo 1  &kp LALT  &kp SPACE    &kp ENTER  &kp BACKSPACE  &mo 1
            >;
        };

        gaming {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E  &kp R     &kp T        &kp Y      &kp U          &kp I      &kp O    &kp P     &kp MINUS
&kp ESC    &kp A  &kp S  &kp D  &kp F     &kp G        &kp H      &kp J          &kp K      &kp L    &kp SEMI  &kp APOS
&kp LSHFT  &kp Z  &kp X  &kp C  &kp V     &kp B        &kp N      &kp M          &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                         &mo 1  &kp LALT  &kp SPACE    &kp ENTER  &kp BACKSPACE  &mo 1
            >;
        };
    };
};
